@model PostMergeRequest
@using Masuit.MyBlogs.Core.Models.Entity
@{
  ViewBag.Title = "正在编辑：" + Model.Post.Title;
  Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container">
  <ol class="breadcrumb">
    <li>
      <a asp-action="Index" asp-controller="Home">首页</a>
    </li>
    <li>
      <a asp-action="Post" asp-controller="Home">文章列表</a>
    </li>
    @if (Model.Post.Category.ParentId > 0) {
      if (Model.Post.Category.Parent.ParentId > 0) {
        <li>
          <a asp-action="Category" asp-controller="Home" asp-route-id="@Model.Post.Category.Parent.ParentId">@Model.Post.Category.Parent.Parent.Name</a>
        </li>
      }

      <li>
        <a asp-action="Category" asp-controller="Home" asp-route-id="@Model.Post.Category.ParentId">@Model.Post.Category.Parent.Name</a>
      </li>
    }
    <li>
      <a asp-action="Category" asp-controller="Home" asp-route-id="@Model.Post.CategoryId">@Model.Post.Category.Name</a>
    </li>
    <li>
      @Html.ActionLink(Model.Post.Title.Length > 50 ? Model.Post.Title.Substring(0, 50) + "..." : Model.Post.Title, "Details", "Post", new {
        id = Model.Post.Id
      }, null)
    </li>
    <li class="current">
      <em>重新编辑合并请求</em>
    </li>
  </ol>
  <hr/>
  <div class="form-group" id="mergeApp">
    @Html.AntiForgeryToken()
    <div class="input-group">
      <span class="input-group-addon size18">
        <label for="title">文章标题：</label>
      </span>
      <input class="form-control input-lg" id="title" placeholder="请输入文章标题" required type="text" v-model="post.Title">
      <input type="hidden" v-model="post.PostId">
      <input type="hidden" v-model="post.Id">
    </div>
    <div class="animated bounceInDown form-group overlay">
      <textarea class="ueditor" id="editor" style="height: calc(100vh - 350px);" type="text/plain"></textarea>
    </div>
    <div class="row">
      <div class="col-md-4 col-sm-4">
        <div class="input-group">
          <span class="input-group-addon">
            <label for="Modifier">提交人：</label>
          </span>
          <input class="form-control" name="Modifier" placeholder="投稿人真名或网名(非常重要)" required type="text" v-model="post.Modifier">
        </div>
      </div>
      <div class="col-md-4 col-sm-4">
        <div class="input-group">
          <span class="input-group-addon">
            <label for="ModifierEmail">你的邮箱：</label>
          </span>
          <input class="form-control" id="ModifierEmail" name="ModifierEmail" placeholder="您的电子邮箱(非常重要)" required type="email" v-model="post.ModifierEmail">
          <span class="input-group-btn">
            <button :disabled="disableGetcode||!post.ModifierEmail" @@click="getcode(post.ModifierEmail)" class="btn btn-danger" type="button">
              {{codeMsg}}
            </button>
          </span>
        </div>
      </div>
      <div class="col-md-4 col-sm-4">
        <div class="input-group">
          <span class="input-group-addon">
            <label for="Code">验证码：</label>
          </span>
          <input class="form-control" id="Code" placeholder="验证码" required type="text" v-model="post.Code">
          <span class="input-group-btn">
            <button :disabled="!post.Code" @@click="submit" class="btn btn-info">
              <i class="icon-rocket2"></i>
              马上投递
            </button>
          </span>
        </div>
      </div>
    </div>
  </div>
</div>
<link href="https://cdn.jsdelivr.net/npm/vxe-pc-ui@4.9.24/lib/style.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/vxe-table@4.16.11/lib/style.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/xe-utils/dist/xe-utils.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vxe-pc-ui@4.9.24/lib/index.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vxe-table@4.16.11/lib/index.umd.min.js"></script>
<script src="~/UEditorPlus/ueditor.config.front.js"></script>
<script charset="utf-8" src="~/UEditorPlus/ueditor.all.js" type="text/javascript"></script>
<script charset="utf-8" src="~/UEditorPlus/lang/zh-cn/zh-cn.js" type="text/javascript"></script>
<script>
const { createApp, ref, onMounted, watch, computed } = Vue;
const { createDiscreteApi } = naive;
const { message, dialog } = createDiscreteApi(["message", "dialog"]);
window.message = message;
window.dialog = dialog;
createApp({
  setup() {
    const post = ref({
      Title: '@Model.Post.Title',
      Content: `@Html.Raw(Model.Content)`,
      Id: '@Model.Id',
      PostId: '@Model.PostId'
    });
    const disableGetcode = ref(false);
    const codeMsg = ref("获取验证码");
    return {
      post,
      disableGetcode,
      codeMsg
    };
  },
  methods: {
    async getcode(email) {
      message.info('正在发送验证码，请稍候...');
      const data = await axios.create({
        headers: {
          'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
        }
      }).post("/validate/sendcode", {
        email: email
      }).then(res => res.data);
      if (data.Success) {
        this.disableGetcode = true;
        message.success('验证码发送成功，请注意查收邮件，若未收到，请检查你的邮箱地址或邮件垃圾箱！');
        localStorage.setItem("user", JSON.stringify({ NickName: this.post.Author, Email: this.post.Email }));
        var count = 0;
        var timer = setInterval(() => {
          count++;
          this.codeMsg = '重新发送(' + (120 - count) + ')';
          if (count > 120) {
            clearInterval(timer);
            this.disableGetcode = false;
            this.codeMsg = '重新发送';
          }
        }, 1000);
      } else {
        message.error(data.Message);
        this.disableGetcode = false;
      }
    },
    submit() {
      if (this.post.Title.trim().length <= 2 || this.post.Title.trim().length > 128) {
        message.error('文章标题必须在2到128个字符以内！');
        return;
      }
      if (this.post.Modifier.trim().length <= 1 || this.post.Modifier.trim().length > 24) {
        message.error('昵称不能少于2个字符或超过24个字符！');
        return;
      }
      if (!/^\w+([-+.]\w+)*@@\w+([-.]\w+)*\.\w+([-.]\w+)*$/.test(this.post.ModifierEmail.trim())) {
        message.error('请输入正确的邮箱格式！');
        return;
      }
      if (this.post.Content.length < 20 || this.post.Content.length > 1000000) {
        message.error('文章内容过短或者超长，请修改后再提交！');
        return;
      }
      axios.create({
        headers: {
          'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
        }
      }).post("/@Model.Id/pushmerge", this.post).then(res => {
        const data = res.data;
        if (data.Success) {
          message.success(data.Message);
          clearInterval(window.interval);
          localStorage.removeItem("merge-post-draft-" +@Model.Id);
          window.location.href = "/" + this.post.PostId;
        } else {
          message.error(data.Message);
        }
      });
    },
  },
  created() {
        if (window.UE) {
            window.ue = UE.getEditor('editor', {
                initialFrameWidth: null,
        initialFrameHeight:document.body.offsetHeight-160
            });
      
      ue.addListener('ready',() => {
        ue.setContent(this.post.Content);
      });
            ue.addListener('contentChange', () => {
                this.post.Content = ue.getContent();
            });
        }
        @if (Model.Post.DisableCopy) {
          <text>
        CopyrightProtect();
        CopyrightProtect4Editor();
            </text>
        }
    var user = JSON.parse(localStorage.getItem("user"));
        if (user) {
            this.post.Modifier=user.NickName;
            this.post.ModifierEmail=user.Email;
        }

        //检查草稿
        const post = JSON.parse(localStorage.getItem("merge-post-draft-" +@Model.Id));
        if (post && post.Content) {
          dialog.warning({
            title: '草稿箱',
            content: '检查到上次有未提交的草稿，是否加载？',
            positiveText: '确定',
            negativeText: '取消',
            draggable: true,
            onPositiveClick: () => {
              this.post = post;
              ue.setContent(this.post.Content);
              window.interval = setInterval(() => {
                localStorage.setItem("merge-post-draft-" +@Model.Id, JSON.stringify(this.post));
              }, 5000);
            },
            onNegativeClick: () => {
              window.interval = setInterval(() => {
                localStorage.setItem("merge-post-draft-" +@Model.Id, JSON.stringify(this.post));
              }, 5000);
            }
          });
        } else {
          window.interval = setInterval(() => {
            localStorage.setItem("merge-post-draft-" +@Model.Id, JSON.stringify(this.post));
          }, 5000);
        }
  }
}).use(naive).mount('#mergeApp');
</script>