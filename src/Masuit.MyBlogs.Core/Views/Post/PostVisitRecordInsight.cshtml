@model Masuit.MyBlogs.Core.Models.Entity.Post

@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>文章《@Model.Title》洞察分析</title>
    <meta content="webkit" name="renderer">
    <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
    <meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport">
</head>
<body style="overflow-x: hidden" id="app">
    <h3 align="center">文章《@Model.Title》洞察分析</h3>
    <vxe-toolbar>
        <template #tools>
            <vxe-input @@search-click="loadData" placeholder="搜索" type="search" v-model="kw"></vxe-input>
            <a asp-controller="Post" asp-action="ExportPostVisitRecords" asp-route-id="@Model.Id" class="theme--primary type--button vxe-button">导出</a>
        </template>
    </vxe-toolbar>
    <!-- 主表格 -->
    <vxe-table :data="tableData" :loading="loading" border class="limited-row-height" ref="tableRef" stripe>
        <vxe-column field="IP" fixed="left" min-width="200" title="IP">
            <template #default="{ row }">
                <a :href="`/tools/ip/${row.IP}`" class="text-primary" target="_blank"> {{ row.IP }} </a>
            </template>
        </vxe-column>
        <vxe-column field="RequestUrl" min-width="180" title="请求URL"></vxe-column>
        <vxe-column field="Location" min-width="180" title="地理位置"></vxe-column>
        <vxe-column field="Referer" min-width="250" title="请求来源"></vxe-column>
        <vxe-column field="Time" min-width="250" title="访问时间"></vxe-column>
    </vxe-table>
    <!-- 分页组件 -->
    <div class="">
        <vxe-pager :current-page.sync="pageConfig.page" :page-size.sync="pageConfig.size" :total="pageConfig.total" @@page-change="pageChange">
        </vxe-pager>
    </div>
    <vxe-toolbar>
        <template #tools>
            <span>对比最近：</span>
            <vxe-select @@change="showCharts" v-model="period">
                <vxe-option :key="num" :label="`${num}天`" :value="num" v-for="num in [7,15,30,60,90,180,365]"></vxe-option>
            </vxe-select>
        </template>
    </vxe-toolbar>
    <div id="chart" style="height: 500px"></div>
    <mini-profiler max-traces="5" />
</body>
</html>
<!-- 引入vxe-table样式 -->
<link href="https://cdn.jsdelivr.net/npm/vxe-pc-ui@4.9.25/lib/style.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/vxe-table@4.16.11/lib/style.min.css" rel="stylesheet">
<script src="https://unpkg.com/vue"></script>
<!-- 引入vxe-table的JS文件 -->
<script src="https://cdn.jsdelivr.net/npm/xe-utils/dist/xe-utils.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vxe-pc-ui@4.9.25/lib/index.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vxe-table@4.16.11/lib/index.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@6/dist/echarts.min.js" type="text/javascript"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js" type="text/javascript"></script>
<script>
    const { createApp, ref, onMounted, watch, computed } = Vue;
    createApp({
        setup() {
            // 表格数据
            const tableData = ref([]);
            const kw = ref('');
            const period = ref(30);
            // 分页配置
            const pageConfig = ref({
                page: 1,
                size: 10,
                total: 0
            });

            // 加载状态
            const loading = ref(false);
            return {
              kw,
                tableData,
                pageConfig,
                loading,
                period
            };
        },
        methods: {
          pageChange({ pageSize, currentPage }) {
            this.pageConfig.page = currentPage;
            this.pageConfig.size = pageSize;
            this.loadData();
          },
          async loadData(){
            this.loading = true;
            const data = await axios.get(`/@Model.Id/records?kw=${this.kw}&page=${this.pageConfig.page}&size=${this.pageConfig.size}`).then(function(response) {
              return response.data;
            });
            this.tableData = data.Data;
            this.pageConfig.total = data.TotalCount;
            this.loading = false;
          },
          showCharts() {
            axios.get(`/@Model.Id/records-chart?compare=${this.period > 0}&period=${this.period}`).then(function(response) {
              const res = response.data;
              var xSeries = [];
            var yCountSeries = [];
            var yUvSeries = [];
            for (let series of res) {
                var x = [];
                var yCount = [];
                var yUV = [];
                for (let item of series) {
                    x.push(new Date(Date.parse(item.Date)).toLocaleDateString());
                    yCount.push(item.Count);
                    yUV.push(item.UV);
                }
                xSeries.push(x);
                yCountSeries.push(yCount);
                yUvSeries.push(yUV);
            }
            var chartDom = document.getElementById('chart');
            var myChart = echarts.init(chartDom);
            const colors = ['#009688', '#ccc'];
            var option = {
                color: colors,
                tooltip: {
                    trigger: 'none',
                    axisPointer: {
                        type: 'cross'
                    }
                },
                legend: {},
                grid: {
                    top: 70,
                    bottom: 50
                },
                title: {
                    left: 'center',
                    text: '文章《@Model.Title》最近访问趋势'
                },
                xAxis: xSeries.map(function (item, index) {
                    return {
                        type: 'category',
                        axisTick: {
                            alignWithLabel: true
                        },
                        axisLine: {
                            onZero: false,
                            lineStyle: {
                                color: colors[index]
                            }
                        },
                        axisPointer: {
                            label: {
                                formatter: function (params) {
                                    return params.value + (params.seriesData.length ? ' 访问量：' + params.seriesData[0].data + "，UV：" + params.seriesData[1].data : '');
                                }
                            }
                        },
                        data: item
                    }
                }),
                yAxis: [
                    {
                        type: 'value'
                    }
                ],
                series: yCountSeries.map(function (item, index) {
                    return {
                        type: 'line',
                        symbol: 'none',
                        xAxisIndex: index,
                        data: item,
                        lineStyle: {
                            type: index === 1 ? 'dashed' : ""
                        },
                        markPoint: {
                            data: [
                                { type: 'max', name: '最大值' },
                                { type: 'min', name: '最小值' }
                            ]
                        },
                        markLine: {
                            data: [
                                { type: 'average', name: '平均值' }
                            ]
                        }
                    }
                }).concat(yUvSeries.map(function (item, index) {
                    return {
                        type: 'line',
                        symbol: 'none',
                        xAxisIndex: index,
                        areaStyle: {},
                        data: item,
                        lineStyle: {
                            type: index === 1 ? 'dashed' : ""
                        }
                    }
                }))
            };
            myChart.setOption(option);
            });
          }
        },
    created() {
        this.loadData();
        this.showCharts();
    }}).use(VxeUI).use(VXETable).mount('#app');
</script>
